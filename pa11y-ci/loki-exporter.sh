#!/usr/bin/env bash

# This script processes the accessibility report generated by pa11y-ci
# and sends the results to a Loki instance for monitoring.

set -euxo pipefail

# Ensure accessibility report exists
ACCESSIBILITY_REPORT="./reports/gl-accessibility.json"
if [[ ! -f "${ACCESSIBILITY_REPORT}" ]]; then
    echo "Error: Accessibility report not found at ${ACCESSIBILITY_REPORT}"
    exit 1
fi

# Ensure required variables are set
if [[ -z "$LOKI_API_BASICAUTH" ]]; then
    echo "Error: LOKI_API_BASICAUTH must be set."
    exit 1
fi

if [[ -z "$LOKI_API_PUSH_URL" ]]; then
    echo "Error: LOKI_API_PUSH_URL must be set."
    exit 1
fi

if [[ -z "$LOKI_LABEL_TEAM" ]]; then
    echo "Error: LOKI_LABEL_TEAM must be set."
    exit 1
fi

# Base variables (defaults can be overridden)
LOKI_LABEL_PROJECT="${LOKI_LABEL_PROJECT:-$CI_PROJECT_NAME}"
LOKI_LABEL_INSTANCE="${LOKI_LABEL_INSTANCE:-$CI_SERVER_HOST}"
LOKI_LABEL_JOB="${LOKI_LABEL_JOB:-pa11y}"

# Set timestamp for metrics
TIMESTAMP=$(date +%s%N)

# Extract URLs and their errors
jq -c '.results | to_entries[]' "${ACCESSIBILITY_REPORT}" | while read -r url_entry; do
    # Extract URL
    URL=$(echo "$url_entry" | jq -r '.key')

    # Process each issue separately for this URL
    echo "$url_entry" | jq -c '.value[]' | while read -r issue; do
        # Create issue with URL
        ISSUE_WITH_URL=$(jq -n --arg url "$URL" --argjson issue "$issue" \
                          '{ "url": $url } + $issue')

        # Create a Loki payload for this single issue
        PAYLOAD=$(jq -n --arg timestamp "$TIMESTAMP" \
                     --arg project "$LOKI_LABEL_PROJECT" \
                     --arg instance "$LOKI_LABEL_INSTANCE" \
                     --arg team "$LOKI_LABEL_TEAM" \
                     --arg job "$LOKI_LABEL_JOB" \
                     --arg issue_data "$ISSUE_WITH_URL" \
'{
  "streams": [
    {
      "stream": {
        "project": $project,
        "team": $team,
        "instance": $instance,
        "job": $job
      },
      "values": [
        [$timestamp, $issue_data]
      ]
    }
  ]
}')

        # Send to Loki
        curl -s -X POST \
                -H "Content-Type: application/json" \
                -u "${LOKI_API_BASICAUTH}" \
                --data "${PAYLOAD}" \
                "${LOKI_API_PUSH_URL}"
    done
done

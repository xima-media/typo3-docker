#!/usr/bin/env bash

# This script processes the accessibility report generated by pa11y-ci
# and sends the results to a Loki instance for monitoring.

set -euxo pipefail

# Ensure accessibility report exists
ACCESSIBILITY_REPORT="./reports/gl-accessibility.json"
if [[ ! -f "${ACCESSIBILITY_REPORT}" ]]; then
    echo "Error: Accessibility report not found at ${ACCESSIBILITY_REPORT}"
    exit 1
fi

# Ensure required variables are set
if [[ -z "${LOKI_API_BASICAUTH}" ]]; then
    echo "Error: ${LOKI_API_BASICAUTH} must be set."
    exit 1
fi

if [[ -z "${LOKI_API_PUSH_URL}" ]]; then
    echo "Error: ${LOKI_API_PUSH_URL} must be set."
    exit 1
fi

if [[ -z "${LOKI_LABEL_TEAM}" ]]; then
    echo "Error: ${LOKI_LABEL_TEAM} must be set."
    exit 1
fi

# Base variables (defaults can be overridden)
LOKI_LABEL_PROJECT="${LOKI_LABEL_PROJECT:-$CI_PROJECT_NAME}"
LOKI_LABEL_INSTANCE="${LOKI_LABEL_INSTANCE:-$CI_SERVER_HOST}"
LOKI_LABEL_JOB="${LOKI_LABEL_JOB:-pa11y}"

# Set timestamp for metrics
TIMESTAMP=$(date +%s%N)

# Extract summary data from the report
TOTAL=$(jq -r '.total' "${ACCESSIBILITY_REPORT}")
PASSES=$(jq -r '.passes' "${ACCESSIBILITY_REPORT}")
ERRORS=$(jq -r '.errors' "${ACCESSIBILITY_REPORT}")

# Extract URLs and their errors
jq -c '.results | to_entries[]' "${ACCESSIBILITY_REPORT}" | while read -r url_entry; do
    # Extract URL
    URL=$(echo "$url_entry" | jq -r '.key')

    # Check if this URL has any issues
    ISSUES_COUNT=$(echo "$url_entry" | jq -r '.value | length')

    if [[ $ISSUES_COUNT -eq 0 ]]; then
        # For URLs with no issues, just send URL and totals
        SUMMARY_DATA=$(jq -n --arg url "$URL" \
                         --arg total "$TOTAL" \
                         --arg passes "$PASSES" \
                         --arg errors "$ERRORS" \
        '{
          "url": $url,
          "total": $total,
          "passes": $passes,
          "errors": $errors
        }' | jq -c .)

        # Create Loki payload with just URL and summary
        PAYLOAD=$(jq -n --arg timestamp "${TIMESTAMP}" \
                     --arg project "${LOKI_LABEL_PROJECT}" \
                     --arg instance "${LOKI_LABEL_INSTANCE}" \
                     --arg team "${LOKI_LABEL_TEAM}" \
                     --arg job "${LOKI_LABEL_JOB}" \
                     --arg summary_data "${SUMMARY_DATA}" \
        '{
          "streams": [
            {
              "stream": {
                "project": $project,
                "team": $team,
                "instance": $instance,
                "job": $job
              },
              "values": [
                [$timestamp, $summary_data]
              ]
            }
          ]
        }')

        # Send to Loki
        curl -s -X POST \
                -H "Content-Type: application/json" \
                -u "${LOKI_API_BASICAUTH}" \
                --data "${PAYLOAD}" \
                "${LOKI_API_PUSH_URL}"
    else
        # Process each issue for URLs with findings
        echo "$url_entry" | jq -c '.value[]' | while read -r issue; do
            # Create combined data with summary and issue
            COMBINED_DATA=$(jq -n --arg url "$URL" \
                               --argjson issue "$issue" \
                               --arg total "$TOTAL" \
                               --arg passes "$PASSES" \
                               --arg errors "$ERRORS" \
            '{
              "url": $url,
              "report_total": $total,
              "report_passes": $passes,
              "report_errors": $errors
            } + $issue |
            # Handle nested objects
            if .runnerExtras then
              .runnerExtras_str = (.runnerExtras | tostring) |
              del(.runnerExtras)
            else . end' | jq -c .)

            # Create a Loki payload for this combined data
            PAYLOAD=$(jq -n --arg timestamp "${TIMESTAMP}" \
                         --arg project "${LOKI_LABEL_PROJECT}" \
                         --arg instance "${LOKI_LABEL_INSTANCE}" \
                         --arg team "${LOKI_LABEL_TEAM}" \
                         --arg job "${LOKI_LABEL_JOB}" \
                         --arg combined_data "${COMBINED_DATA}" \
            '{
              "streams": [
                {
                  "stream": {
                    "project": $project,
                    "team": $team,
                    "instance": $instance,
                    "job": $job
                  },
                  "values": [
                    [$timestamp, $combined_data]
                  ]
                }
              ]
            }')

            # Send to Loki
            curl -s -X POST \
                    -H "Content-Type: application/json" \
                    -u "${LOKI_API_BASICAUTH}" \
                    --data "${PAYLOAD}" \
                    "${LOKI_API_PUSH_URL}"
        done
    fi
done
